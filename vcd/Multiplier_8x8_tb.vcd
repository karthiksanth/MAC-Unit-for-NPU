$date
	Wed Oct  2 21:50:19 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module Multiplier_8x8_tb $end
$scope module DUT $end
$var wire 8 ! Cout_R123 [7:0] $end
$var wire 8 " In_1 [7:0] $end
$var wire 8 # In_2 [7:0] $end
$var wire 1 $ Mode $end
$var wire 1 % Sign $end
$var wire 8 & Sum_R123 [7:0] $end
$var wire 8 ' Sum_R123_1 [7:0] $end
$var wire 16 ( Result [15:0] $end
$var wire 8 ) Partial_Product_Inter [7:0] $end
$var wire 32 * Partial_Product [31:0] $end
$var wire 2 + Cout [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 +
b100100000010000000000000000000 *
b1000000 )
b10010010000000 (
b100100 '
b1001000 &
0%
1$
b1000000 #
b10010010 "
b0 !
$end
#20
b110 '
b1100 &
b11000100 (
b0 )
b11000000000000000100 *
b110001 #
b100 "
#40
b111101 '
b0 !
b10 )
b1111010 &
b110011110100100 (
b1100000010010000011000000100100 *
b11000110 #
b10000110 "
#60
b0 +
b1 )
b1110 '
b1 !
b11010 &
b111000010 (
b1101100010010 *
b1001 #
b110010 "
#80
b11000 '
b0 )
b0 !
b110000 &
b100001100000000 (
b1000000000000000011000000000000 *
b10000110 #
b10000000 "
#100
b10011011 '
b111011 !
b11000000 &
b111001101101010 (
b111001 )
b1100011011000111001101010011010 *
b10011110 #
b10111011 "
#120
b1 +
b11110010 '
b1001010 !
b1010000 &
b1011111001000100 (
b1000010 )
b10110100010010000101101000100100 *
b11000110 #
b11110110 "
#140
b10 +
b1011 '
b101000 !
b110000101110100 (
b11000111 &
b10100010 )
b1011010010010000010110100100100 *
b1100011 #
b11111100 "
#160
b11 +
b100 '
b1010 !
b11110100 &
b11100000 )
b10000010001010 (
b11110000010100001111000001010 *
b1010101 #
b1100010 "
#180
b0 +
b10111110 '
b11011111000110 (
b10000101 !
b1110010 &
b11010001 )
b101101000001101010010100010110 *
b111011 #
b11110010 "
#200
b0 +
b110111 '
b0 !
b1101111 &
b11011111111 (
b11 )
b11011000000000000111111 *
b11000111 #
b1001 "
#220
b11 +
b100001 '
b100011 !
b110010000101111 (
b11111100 &
b10100011 )
b1011010001101100110100100111111 *
b1100111 #
b11111001 "
#240
b1 +
b1100011 '
b10100000 )
b1000 !
b10110110 &
b10110001101000 (
b101010000110000000111000001000 *
b1100010 #
b1110100 "
#260
b0 +
b1100 !
b11111111 '
b11111111100100 (
b11100110 &
b101100 )
b110010010001101000110011000100 *
b1011110 #
b10101110 "
#280
b0 +
b10001001100 (
b100010 '
b10010 !
b100000 &
b110000 )
b11000100100000001000001100 *
b110010 #
b10110 "
#300
b0 +
b11001011 '
b1000 !
b10000111 &
b10000000 )
b1100101110101 (
b11000000010000000111100000101 *
b10000101 #
b110001 "
#320
b0 !
b100000 '
b1000000 )
b1000000 &
b10010000000000 (
b100100000000000000000000000000 *
b10010000 #
b1000000 "
#340
b0 +
b111 '
b10100 !
b11100110 &
b1000100 )
b10000011100110 (
b110100000101001011011001000110 *
b1001110 #
b11010101 "
#360
b10101 '
b100 !
b100010 &
b110 )
b1010100011 (
b10010001100011 *
b1001 #
b1001011 "
#380
b111 '
b0 !
b1111 &
b11 )
b11110110 (
b11000000000000110110 *
b101001 #
b110 "
#400
b10 '
b100 )
b100 &
b1000010 (
b1000010 *
b110 #
b1011 "
#420
b0 '
b0 &
b0 )
b0 (
b0 *
b101 #
b0 "
#440
b1 '
b110000 (
b11 &
b11 )
b110000 *
b110 #
b1000 "
#460
b10 '
b100 &
b100 )
b1001000 (
b1001000 *
b1000 #
b1001 "
#480
b0 '
b0 &
b0 )
b110 (
b110 *
b1 #
b110 "
#500
b101 '
b1011 &
b1011 )
b10110100 (
b10110100 *
b1100 #
b1111 "
#520
b1 '
b11 &
b11 )
b111100 (
b111100 *
b110 #
b1010 "
#540
b10 &
b10 )
b101100 (
b101100 *
b100 #
b1011 "
#560
b110 '
b1100 &
b1100 )
b11000011 (
b11000011 *
b1101 #
b1111 "
#580
b101 '
b1011 &
b1011 )
b10110110 (
b10110110 *
b1110 "
#600
b1 '
b10 &
b10 )
b101101 (
b101101 *
b1001 #
b101 "
#620
b0 '
b0 &
b0 )
b0 (
b0 *
b11 #
b0 "
#640
b11 '
b1111000 (
b111 &
b111 )
b1111000 *
b1010 #
b1100 "
#660
b0 '
b0 &
b0 )
b1001 (
b1001 *
b1001 #
b1 "
#680
b1 &
b1 )
b11000 (
b11000 *
b1000 #
b11 "
#700
b110 '
b1101 &
b1101 )
b11010010 (
b11010010 *
b1110 #
b1111 "
#720
b11 '
b110 &
b110 )
b1101110 (
b1101110 *
b1010 #
b1011 "
#740
b100 '
b1001 &
b1001 )
b10010000 (
b10010000 *
b1100 #
b1100 "
#760
b10 '
b100 &
b100 )
b1001011 (
b1001011 *
b101 #
b1111 "
#780
b0 '
b0 &
b0 )
b1000 (
b1000 *
b10 #
b100 "
#800
